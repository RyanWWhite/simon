let clickedTileIds = [];

$(document).ready(function () {
  //runs the javascript code when the document is safe to manipulate
  console.log("Page loaded successfully.");
  //displays message in the console when the page is loaded successfully

  initializeEvents();
  console.log("Events created successfully.");
  //displays message in the console if the tile events and game mechanics are loaded successfully
});

function initializeEvents() {
  //executes click and hover events for buttons and tiles
  tileEvents();
  gameMechanicsEvents();
}

function initializeSingleTileEvent(tileId, hoverColor, originalColor) {
  //executes tile hover events
  $(tileId).hover(
    function () {
      $(this).css("background-color", hoverColor);
      //changes tile color to white when mouse hovers over
    },
    function () {
      $(this).css("background-color", originalColor);
      //changes tile back to original background color when mouse stops hovering
    }
  );

  $(tileId).click(function () {
    //stores the ID of the tile that's been clicked
    clickedTileIds.append();
    //HOMEWORK: keep track of the tile ID's on every click
  });
}

function tileEvents() {
  //initializing the proper paramteres for tiles to light up
  //("tile ID", "background color on hover", "original background color")
  initializeSingleTileEvent("#left-top", "white", "red");
  initializeSingleTileEvent("#right-top", "white", "orange");
  initializeSingleTileEvent("#left-bottom", "white", "blue");
  initializeSingleTileEvent("#right-bottom", "white", "green");
}

function gameMechanicsEvents() {
  //created click events for the start, repeat and validate buttons
  $("button#start-button").click(runGame);
  //starts game
  $("button#repeat-button").click(repeat);
  //repeats the sequence of tiles
  $("button#validate-button").click(validate);
  //validates that the sequence of tiles was clicked correctly in order to continue the game
}

async function generateSequence(steps, timout, tileList) {
  //generates a sequence for the user to follow using the tile list
  //uses steps to detect how many steps are generated by the system
  //uses timout to wait 1000 ms for the next tile to light up
  let sequenceIds = [];
  let previousTileId = -1;
  // cycle 1 => index = 0 , 0 < 2 = true
  // cycle 2 => index = 1 , 1 < 2 = true
  // cycle 3 => index = 2,  2 < 2 = false, NOT GOING TO BE EXECUTED

  for (let index = 0; index < steps; index += 1) {
    // cycle 1 => previousTileId = -1, randomOne = 1,  -1 != 1, cycle will ignore the whileloop
    // cycle 2 => previousTileId = 1, randomOne = 1,  1 == 1, enter the while loop
    //      cycle 2.whileloop1 => previousTileId = 1, randomOne = 1,  1 == 1, enter the while loop
    //      cycle 2.whileloop2 => previousTileId = 1, randomOne = 2,  1 != 2, exit  the while loop
    // set previiousTileId to 2
    // cycle 3 => previousTileId = 2, randomOne = 4,  2 != 4, ignore the while loop

    let getRandomTile = randomizer(tileList);
    //declaring that getRandomTile now holds the values of randomizer function
    console.log("generating random tile: " + getRandomTile["tileId"]);
    //displays the ID of the randomly generated tile
    if (getRandomTile["tileId"] == previousTileId) {
      console.log(
        "Error: random tile same as previous one. New One: " +
          getRandomTile["tileId"] +
          ". Previous: " +
          previousTileId
        //if the tile that was picked is equal to, or the same as the previous tile, an error will appear in the console
        //console will show the new tile that was picked along with the previous tile
      );
      while (getRandomTile["tileId"] == previousTileId) {
        // Condition to keep inside the cycle until the condition is broken
        getRandomTile = randomizer(tileList);
        console.log(
          "Retrying: Generating new tile ID: " + getRandomTile["tileId"]
        );
        //generates new random tiles until the condtion is broken
        //displays message in the console to show  the new tile that is has been generated
      }
    }
    previousTileId = getRandomTile["tileId"];
    //declaring that previousTileId now holds the values of the getRandomTile variable
    lightUpTile(
      //parameters for the tile being lit
      getRandomTile["object"],
      getRandomTile["originalColor"],
      getRandomTile["activatedColor"],
      timout
      //waits 1000ms to change
    );

    await sleep(timout);
    //uses await to pause the execution of generating a sequence until the promise is settled
    //the sleep function is then exectued to wait 1000ms for next tile to light up
  }
  return sequenceIds;
  //used to end the function and return the ID's of each tile that's been picked
}

async function runGame() {
  //exectues the tile parameteres to start running the game
  let leftUpperTileDiv = $("#left-top");
  let rightUpperTileDiv = $("#right-top");
  let rightLowerTileDiv = $("#right-bottom");
  let leftLowerTileDiv = $("#left-bottom");
  //getting the documents from HTML and assigning them names in javascript

  let leftUpperTileOriginalColor = "red";
  let rightUpperTileOriginalColor = "orange";
  let leftLowerTileOriginalColor = "blue";
  let rightLowerTileOriginalColor = "green";
  //assigning original background color to each tile

  let leftUpperTileActivatedColor = "cyan";
  let rightUpperTileActivatedColor = "cyan";
  let leftLowerTileActivatedColor = "cyan";
  let rightLowerTileActivatedColor = "cyan";
  //assigning background color to each tile when the tile lights up

  let tileList = [
    //array that holds paramteres for each tile
    //object: tile div class
    //originalColor: original background color
    //activatedColor: background color on hover
    //tileId: ID number that's assigned to tile in array
    {
      // INDEX = 0
      object: leftUpperTileDiv,
      originalColor: leftUpperTileOriginalColor,
      activatedColor: leftUpperTileActivatedColor,
      tileId: 1,
    },
    {
      // INDEX = 1
      object: rightUpperTileDiv,
      originalColor: rightUpperTileOriginalColor,
      activatedColor: rightUpperTileActivatedColor,
      tileId: 2,
    },
    {
      // INDEX = 2
      object: rightLowerTileDiv,
      originalColor: rightLowerTileOriginalColor,
      activatedColor: rightLowerTileActivatedColor,
      tileId: 3,
    },
    {
      // INDEX = 3
      object: leftLowerTileDiv,
      originalColor: leftLowerTileOriginalColor,
      activatedColor: leftLowerTileActivatedColor,
      tileId: 4,
    },
  ];

  let sequenceSteps = $("input#steps").val();
  //defining steps in javascript and gets the objects desired value
  console.log("Getting sequence steps: " + sequenceSteps);
  //displays message in console of how many steps the user has input
  let generatedTileIds = generateSequence(sequenceSteps, 1000, tileList);

  checkUserInput();
}

function checkUserInput() {}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function lightUpTile(tileObject, originalColor, activatedColor, timout) {
  //async function allows us to use "await" to make the function pause the execution and wait for a resolved promise before it continues
  console.log("Lighting up tile: ", originalColor);
  // URL:
  tileObject.css("background-color", activatedColor);
  await sleep(timout);
  //changes tile background to cyan and waits 1000ms to change back
  tileObject.css("background-color", originalColor);
  await sleep(timout);
  //changes tile background back to the original color and waits 1000ms to continue
}

function randomizer(tileList) {
  // e.g tileList = [1, 2, 3, 4]; firstElement = tileList[0]
  // Math.random() -> 0 to 1, e.g., 0.5 * tileList.length = 0.5 * 4 = 2
  //https://www.w3schools.com/js/js_random.asp
  let randomElementIndex = Math.random() * tileList.length; // E.g. (Assuming the array length is >= 4), 0.4 * 4 = 1.6
  let randomElementIndexRounded = Math.round(randomElementIndex); // 0.4 * 4 = 1.6 will round to nearest whole number which is Math.round(1.6)=2, Math.round(0.3)=0
  let randomElement = tileList[randomElementIndexRounded]; // E.g, Assumptions (tileList = [1, 2, 3, 4]; let index = 2), tileList[index] => selects the third object in ther array because the index starts at 0
  return randomElement;
  //ends the funciton and returns a random tile from the array
}

function repeat() {}

function validate() {}
